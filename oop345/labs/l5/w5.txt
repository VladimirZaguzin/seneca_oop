Script started on Mon 14 Mar 2016 11:36:11 PM EDT
vzaguzin@matrix:~/oop/oop345/labs/l5> ^M[K
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> whoami
vzaguzin
vzaguzin@matrix:~/oop/oop345/labs/l5> cat w5.cpp Notifications.* Message.*
// Workshop 5 - Containers
 // w5.cpp

 #include <iostream>
 #include <fstream>
 #include "Message.h"
 #include "Notifications.h"

 const char REC_DELIMITER = '\n';

 w5::Notifications collect(std::ifstream& in, char recDelim) {
     w5::Notifications notifications;

     do {
         w5::Message message(in, recDelim);
         if (!message.empty())
             notifications += std::move(message);
     } while(in);

     return notifications;
 }

 int main(int argc, char* argv[]) {
     if (argc == 1) {
         std::cerr << argv[0] << ": missing file operand\n";
         return 1;
     }
     else if (argc != 2) {
         std::cerr << argv[0] << ": too many arguments\n";
         return 2;
     }
     std::ifstream file(argv[1]);
     if (!file) {
         std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n"; 
         return 3;
     }

     std::cout << "\nNotifications\n=============\n\n";
     w5::Notifications notifications = collect(file, REC_DELIMITER);

     notifications.display(std::cout);

     std::cout << "Press any key to continue ... ";
     std::cin.get();
 }//Notifications.cpp
#include "Notifications.h"
namespace w5 {
Notifications::Notifications() //default constructor - empty
{
    saved = 0;
    for (int i = 0; i < 10; ++i)
        msg[i] = new Message();

}
Notifications::Notifications(const Notifications& src) //- copy constructor
{
    saved=src.saved;
    for (int i = 0; i<saved;i++)
        msg[i] = src.msg[i];
}
Notifications& Notifications::operator=(const Notifications& src)// - copy assignment operator
{
    if (this != &src)
    {
        saved = src.saved;
        for (int i = 0; i<saved;i++)
            msg[i] = src.msg[i];
    }
    return *this;
}
Notifications::Notifications(Notifications&& src)// - move constructor
{
        saved = src.saved;
        for (int i = 0; i < src.saved; i++)
        {
            msg[i] = src.msg[i];
        }
    
    for (int i = 0; i < src.saved; ++i)
    {
        delete src.msg[i];
        src.msg[i] = NULL;
    }
}
    
Notifications& Notifications::operator=(Notifications&& src)// - move assignment operator
{
    if (this != &src)
    {
        saved = src.saved;
        src.saved = 0;
        for (int i = 0; i<saved;i++)
        {
            msg[i] = src.msg[i];
        }
        
        for (int i = 0; i < saved; ++i)
        {
            delete src.msg[i];
            src.msg[i] = NULL;
        }
    }
    return *this;
}
    
Notifications::~Notifications()// - destructor
{
    if (saved > 0)
    {
        for (int i = 0; i < saved; ++i)
        {
            delete msg[i];
            msg[i] = NULL;
        }
    }
}
void Notifications::operator+=(const Message& msg)// - adds msg to the set
{
    if (saved < 10)
    {
        saved++;
        *this->msg[saved] = msg;
    }
}
    
void Notifications::display(std::ostream& os) const/* - inserts the Message objects
to the os output stream*/
{

    for (int i = 0; i<saved;i++)
        msg[i]->display(std::cout);
    
}
}//w5//Notifications.h
#pragma once
#include <iostream>
#include "Message.h"
namespace w5{
class Notifications
{
    int saved;
    Message* msg[10];
public:
    Notifications();
    Notifications(const Notifications& src);
    Notifications& operator=(const Notifications& src);
    Notifications(Notifications&& src);
    Notifications& operator=(Notifications&& src);
    ~Notifications();
    void operator+=(const Message& msg);
    void display(std::ostream& os) const;
};
}//w5//Message.cpp
#include "Message.h"
namespace w5
{

    Message::Message()
    {
    }
    Message::Message(std::ifstream& in, char c) /*constructor retrieves a record from
the in file object, parses the record (as described above) and stores 
its components in the Message object. c is the character that delimits 
each record*/
{
if (!in.eof()) {
user = "Message\n User : ";
char x;
x = in.get();
while ( x!=' ' && x!=c && x!=EOF)
{
user += x;
x = in.get();
}
if (x==c)
reply="";
else {
x = in.get();
if (x=='@'){
reply += "Reply : ";
while ( x!=' ' && x!=c && x!=EOF)
{
x = in.get();
reply += x;
}
}
tweet += "Tweet : ";
while ( x!=c && x!=EOF)
{
tweet += x;
x = in.get();
}

}
}
}
bool Message::empty() const// returns true if the object is in a safe empty state
{
    if (reply=="" && tweet==""){
        return true;
    } else {
        return false;
    }
}
void Message::display(std::ostream& os) const// displays the Message objects within the container
{
    os << user << std::endl;
    os << reply << std::endl;
    os << tweet << std::endl;
}
//w5
}//Message.h
#pragma once
#include <iostream>
#include <fstream>

namespace w5{
class Message{
    std::string user;
    std::string reply;
    std::string tweet;
    
    
public:
Message();
Message(std::ifstream& in, char c);
bool empty() const;
void display(std::ostream& os) const;
};
}//w5vzaguzin@matrix:~/oop/oop345/labs/l5> g++ -o w5 -std=c++0x w5.cpp Notifications.cpp Message.cpp
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> 
vzaguzin@matrix:~/oop/oop345/labs/l5> w5 w5_test.dat

Notifications
=============


Message
 User : jim
Tweet : Workshop 5 is cool
Message
 User : harry
Reply : jim 
Tweet :  working on workshop 5 now
Message
 User : dave

Tweet : what the ^#$%!
Message
 User : john
Reply : harry 
Tweet :  I'm done
Press any key to continue ... exit
vzaguzin@matrix:~/oop/oop345/labs/l5> exit
exit

Script done on Mon 14 Mar 2016 11:37:20 PM EDT
